Introduction to Robot Framework
----------------------------------
Robot Framework is a Python based, and extensible keyword driven automation framework
	- Acceptance testing
	- Acceptance test driven development (ATDD)
	- Behavior driven development (BDD)
	- Robotic process automation (RPA)

Why Robot Framework?
--------------------
Robot Framework uses tabular syntax for uniform test cases and supports data-driven testing with built-in variables.
It enables reusable keywords, tagging for test selection, and modular testing for diverse interfaces.
It is platform-independent, supports testing various applications, and integrates with CI systems via XML output.
It offers HTML logs, Python-based custom libraries, and versioning-friendly test suites.
It provides setup/teardown at all levels and supports practical testing in multiple environments.

Architecture of robot framework
-------------------------------
Robot Framework has a different Test Libraries
The libraries can be found here ==> https://robotframework.org/
Builtin Standard Libraries

In case this a new project on the system the below requirements libraries need to be installed

Requirements
-------------
1. python --version
2. pip --version
3. pip install selenium or pip uninstall selenium
4. Pip install robotframework or Pip uninstall robotframework
5. Pip install --upgrade robotframework
6. Pip install robotframework == 2.9.2
7. Pip list
8. pip show robotframework
9. Pip check robotframework
10. Pip install robotframework-seleniumlibrary
11. Pip uninstall robotframework-seleniumlibrary

To install all create, a requirements.txt file and enter the libraries/packages without adding pip install, uninstall in front of the libraries
Afterwards, use cmd ==> pip install -r requirements.txt to automatically install all together than install it individually
Then ==> pip list to verify the libraries installed

Install packages
- Creating a Directory which is the Test Suit
install plugin

This cmd activate virtual environment (venv) in the project ==> source venv/bin/activate

Advantages of Robot Framework
-------------------------------
1. Open-source, operating system independent.
2. Extends support for web, device, api and database automation.
3. No much programming is required.
4. Excellent reporting, support CI, parallel execution, remote execution.
5. Robot Framework is case-insensitive

driver.get()

open browser
OPEN BROWSER
Open Browser
Open browser


Disadvantages of Robot Framework
--------------------------------
1. Hard to maintain.
2. Difficult to customize HTML reports
3. Difficult to debug Errors.
4. Strict Indentation rules.

Test Suite or Test Case file
----------------------------
1. A Test Suite or Test Case file is a collection of test cases.
2. Test case contains test name and test steps.
3. A test suite can be saved as
	i. robot (plain text format â‡’ space and pipe separated)
	ii. robot.rst (reStructuredText format)
	iii. rbt (JSON format)


Keywords ==> functions (Builtin and user-defined function)

resources.robot ==> user-defined function

robot -v Browser:firefox -d Results Day1\FirstTestCase.robot

robot --variable Browser:edge --outputdir Results Day1\FirstTestCase.robot

To run firstly add venv with cmd ==> source venv/bin/activate
Then cmd to run is ==>  robot FirstTestCase.robot

Test Cases Output Day_1
------------------------
'''
1. EXERCISE
#Open Web Browser (Chrome/Firefox/Edge)
#Open URL https://opensource-demo.orangehrmlive.com/
OUTPUT
(venv) olakoya@Olapejus-MacBook-Pro RobotFramework % robot "Day 1/FirstTestCase.robot"
==============================================================================
FirstTestCase
==============================================================================
Login Test :: This is test case for login to the application          | PASS |
------------------------------------------------------------------------------
FirstTestCase                                                         | PASS |
1 test, 1 passed, 0 failed
==============================================================================
Output:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/output.xml
Log:     /Users/olakoya/Desktop/PythonProjects/RobotFramework/log.html
Report:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/report.html
'''

Inspecting the url page ==> https://opensource-demo.orangehrmlive.com/
    <input data...> for textbox is called a TAG NAME

2. EXERCISE
#Enter Username (Admin)
#Enter Password (admin1234)
#Click on Login
OUTPUT
'''
==============================================================================
FirstTestCase
==============================================================================
Login Test :: This is test case to login into the application         | PASS |
------------------------------------------------------------------------------
FirstTestCase                                                         | PASS |
1 test, 1 passed, 0 failed
==============================================================================
Output:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/output.xml
Log:     /Users/olakoya/Desktop/PythonProjects/RobotFramework/log.html
Report:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/report.html
(venv) olakoya@Olapejus-MacBook-Pro RobotFramework %
'''

3. EXERCISE
#Capture title of the home page (Actual title)
#Verify title of the page: OrangeHRM (Expected)
#Close browser
OUTPUT
'''
(venv) olakoya@Olapejus-MacBook-Pro RobotFramework % robot Day_1/FirstTestCase.robot
==============================================================================
FirstTestCase
==============================================================================
Login Test :: This is test case to login into the application         | PASS |
------------------------------------------------------------------------------
FirstTestCase                                                         | PASS |
1 test, 1 passed, 0 failed
==============================================================================
Output:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/output.xml
Log:     /Users/olakoya/Desktop/PythonProjects/RobotFramework/log.html
Report:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/report.html
(venv) olakoya@Olapejus-MacBook-Pro RobotFramework %
'''

The same url can be used across every other test cases
KEYWORDS are nothing but FUNCTIONS

EDGE BROWSER cmd ==>  robot -v Browser:edge Day_1/FirstTestCase.robot

(venv) olakoya@Olapejus-MacBook-Pro RobotFramework % robot -v Browser:edge Day_1/FirstTestCase.robot
==============================================================================
FirstTestCase
==============================================================================
Login Test :: This is test case to login into the application         | PASS |
------------------------------------------------------------------------------
FirstTestCase                                                         | PASS |
1 test, 1 passed, 0 failed
==============================================================================
Output:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/output.xml
Log:     /Users/olakoya/Desktop/PythonProjects/RobotFramework/log.html
Report:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/report.html
(venv) olakoya@Olapejus-MacBook-Pro RobotFramework %

FIREFOX cmd ==>  robot -v Browser:firefox Day_1/FirstTestCase.robot

(venv) olakoya@Olapejus-MacBook-Pro RobotFramework % robot -v Browser:firefox Day_1/FirstTestCase.robot
==============================================================================
FirstTestCase
==============================================================================
Login Test :: This is test case to login into the application         | PASS |
------------------------------------------------------------------------------
FirstTestCase                                                         | PASS |
1 test, 1 passed, 0 failed
==============================================================================
Output:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/output.xml
Log:     /Users/olakoya/Desktop/PythonProjects/RobotFramework/log.html
Report:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/report.html
(venv) olakoya@Olapejus-MacBook-Pro RobotFramework %

To generate output reports into the results folder
    cmd to use is ==> robot -v Browser:edge -d Results Day_1/FirstTestCase.robot

You can specify from cmdline the same way and cmd to use is
    cmd is ==> robot --variable Browser:edge --outputdir Results Day_1/FirstTestCase.robot

Shortform of these commands --variable and --outputdir are -v and -d
e.g
(venv) olakoya@Olapejus-MacBook-Pro RobotFramework % robot --variable Browser:edge --outputdir Results Day_1/FirstTestCase.robot
==============================================================================
FirstTestCase
==============================================================================
Login Test :: This is test case to login into the application         | PASS |
------------------------------------------------------------------------------
FirstTestCase                                                         | PASS |
1 test, 1 passed, 0 failed
==============================================================================
Output:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/Results/output.xml
Log:     /Users/olakoya/Desktop/PythonProjects/RobotFramework/Results/log.html
Report:  /Users/olakoya/Desktop/PythonProjects/RobotFramework/Results/report.html

- Close browser cmd is a close method and form of keyword
- With such one can write simple robust Test Case
- Moving the Login code lines to Keyword phase and replacing it with the "Login Steps" keyword name is possible hence the above comments
